import java.util.Collections;
import java.util.Random;

// Init an array with set 1, 2, and 3.
//int[] nums = {1,2,3};
//Solution solution = new Solution(nums);

// Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must equally likely to be returned.
//solution.shuffle();

// Resets the array back to its original configuration [1,2,3].
//solution.reset();

// Returns the random shuffling of array [1,2,3].
//solution.shuffle();
public class ShuffleAnArray {

	int[] nums;
	int[] dupNums;

    public ShuffleAnArray(int[] nums) {
        this.nums = nums;
        dupNums = new int[nums.length];
        for(int i=0; i<nums.length; i++){
        	dupNums[i] = nums[i];
        }
    }
    
    /** Resets the array to its original configuration and return it. */
    public int[] reset() {
    	return dupNums;
    }
    
    /** Returns a random shuffling of the array. */
    public int[] shuffle() {
    	for(int i=0; i<nums.length; i++){
    		Random random = new Random();
    		int j = random.nextInt(nums.length);
    		int temp = nums[i];
    		nums[i] = nums[j];
    		nums[j] = temp;
    	}
    	return nums;
    }
    
    public static void main(String[] args){
    	int[] array = {1,2,3,4,5,6};
    	ShuffleAnArray shuffleArray = new ShuffleAnArray(array);
    	shuffleArray.shuffle();
    	for(int i=0;i<array.length;i++){
    		System.out.println(array[i]);
    	}
    	int[] resetOne = shuffleArray.reset();
    	for(int i=0;i<array.length;i++){
    		System.out.println(resetOne[i]);
    	}
    }

}
