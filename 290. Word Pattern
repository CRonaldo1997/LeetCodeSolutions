import java.util.HashMap;

//Given a pattern and a string str, find if str follows the same pattern.
//
//Here follow means a full match, such that there is a bijection between a letter in pattern and a non-empty word in str.
//
//Examples:
//pattern = "abba", str = "dog cat cat dog" should return true.
//pattern = "abba", str = "dog cat cat fish" should return false.
//pattern = "aaaa", str = "dog cat cat dog" should return false.
//pattern = "abba", str = "dog dog dog dog" should return false.
//Notes:
//You may assume pattern contains only lowercase letters, and str contains lowercase letters separated by a single space.

public class WordPattern290 {
	public static boolean wordPattern(String pattern, String str) {
		String[] strArr = str.split(" ");
		if(pattern.length() != strArr.length){
			return false;
		}
		HashMap<Character,String> hashMap = new HashMap<Character,String>();
		
		for(int i=0; i<pattern.length(); i++){
			char key = pattern.charAt(i);
			if(!hashMap.containsKey(key) && !hashMap.containsValue(strArr[i])){
				hashMap.put(key, strArr[i]);
			}
			else if(!hashMap.containsKey(key) && hashMap.containsValue(strArr[i])){
				return false;
			}
			else{
				if(!hashMap.get(key).equals(strArr[i])){
					return false;
				}
			}
		}
		return true;
	    }
	
	public static void main(String[] args){
		System.out.println(wordPattern("abba","dog dog dog dog"));
	}
}
