//
//476. Number Complement
//Given a positive integer, output its complement number. The complement strategy is to flip the bits of its binary representation.
//
//Note:
//The given integer is guaranteed to fit within the range of a 32-bit signed integer.
//You could assume no leading zero bit in the integerâ€™s binary representation

public class NumberComplement {
	public int findComplement(int num) {
		String bs = convertToBinaryString(num);
		StringBuilder sBuilder = new StringBuilder();
		
		for(int i=0; i<bs.length();i++){
			if(bs.charAt(i)=='1'){
				sBuilder.append('0');
			}
			else{
				sBuilder.append('1');
			}
		}
		return convertToDecimal(sBuilder.toString());
	    }
	
	public String convertToBinaryString(int n){
		StringBuilder sb = new StringBuilder();
		while(n != 0){
			int m = n%2;
			n = n/2;
			sb.append(m);
		}
		return sb.reverse().toString();
	}
	
	public int convertToDecimal(String s){
		int sum = 0;
		for(int i=0;i<s.length();i++){
			char ithString = s.charAt(i);
			int ithVal = Integer.valueOf(ithString)-48;
			int pow = (int)Math.pow(2, s.length()-1-i);
			sum += ithVal * pow;
		}
		return sum;
	}
	
	public static void main(String[] args){
		NumberComplement nc = new NumberComplement();
		System.out.println(nc.findComplement(5));
	}
}
